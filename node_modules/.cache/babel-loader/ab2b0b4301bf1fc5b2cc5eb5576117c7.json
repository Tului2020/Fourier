{"ast":null,"code":"var _jsxFileName = \"/home/tului/Desktop/Fourier/src/calculator/calculator.js\";\nimport React from 'react';\nimport './calculator.css';\nimport Algebrite from 'algebrite';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      equation: 'x',\n      limit: 5,\n      n: 4\n    };\n    this.updateEquation = this.updateEquation.bind(this);\n    this.updateState = this.updateState.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"equation-confirmation\",\n        children: \"No Equation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: this.state.equation,\n        className: \"equations\",\n        id: \"equation\",\n        onChange: this.updateState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"limits\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"lower-limit\",\n          children: [\"Limit \", /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.limit,\n            className: \"equation\",\n            id: \"limit\",\n            onChange: this.updateState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"lower-limit\",\n          children: [\"N \", /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.n,\n            className: \"equation\",\n            id: \"n\",\n            onChange: this.updateState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.updateEquation,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n  }\n\n  updateState(event) {\n    let stateToChange = event.target.id;\n    let newValue = event.target.value;\n    this.setState({\n      [stateToChange]: newValue\n    });\n  }\n\n  updateEquation() {\n    let {\n      equation,\n      limit\n    } = this.state;\n    let resultElement = document.getElementById('equation-confirmation');\n\n    if (!equation) {\n      resultElement.innerHTML = 'No Equation';\n    } else {\n      resultElement.innerHTML = Algebrite.run(equation); // Algebrite.defint(Algebrite.run(equation), 'x', lowerLimit, upperLimit)\n    }\n\n    let constA = [];\n    let constB = []; // this.updateResult(['dsadas'], ['dasda'])\n  }\n\n  updateResult(a, b) {\n    let resultElement = document.getElementById('result');\n\n    while (resultElement.firstChild) {\n      resultElement.firstChild.remove();\n    }\n\n    a.forEach(el => {\n      let divComp = document.createElement('div');\n      divComp.innerHTML = el;\n      resultElement.appendChild(divComp);\n    });\n    b.forEach(el => {\n      let divComp = document.createElement('div');\n      divComp.innerHTML = el;\n      resultElement.appendChild(divComp);\n    });\n  }\n\n}\n\nexport default Calculator;","map":{"version":3,"sources":["/home/tului/Desktop/Fourier/src/calculator/calculator.js"],"names":["React","Algebrite","Calculator","Component","constructor","props","state","equation","limit","n","updateEquation","bind","updateState","render","event","stateToChange","target","id","newValue","value","setState","resultElement","document","getElementById","innerHTML","run","constA","constB","updateResult","a","b","firstChild","remove","forEach","el","divComp","createElement","appendChild"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './calculator.css';\nimport Algebrite from 'algebrite'\n\n\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { equation: 'x', limit: 5, n: 4}\n    this.updateEquation = this.updateEquation.bind(this)\n    this.updateState = this.updateState.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <div id='equation-confirmation'>No Equation</div>\n        <input value={this.state.equation} className='equations' id='equation' onChange={this.updateState}/>\n        <div className='limits'>\n        <div id='lower-limit'>\n            Limit <input value={this.state.limit} className='equation' id='limit' onChange={this.updateState}/>\n          </div>\n          <div id='lower-limit'>\n            N <input value={this.state.n} className='equation' id='n' onChange={this.updateState}/>\n          </div>\n        </div>\n        <button onClick={this.updateEquation}>Update</button>\n        <div id='result'></div>\n      </div>\n    )\n  }\n\n  updateState(event) {\n    let stateToChange = event.target.id\n    let newValue = event.target.value\n    this.setState({[stateToChange]: newValue})\n  }\n\n\n  updateEquation() {\n    let { equation, limit, } = this.state\n    let resultElement = document.getElementById('equation-confirmation')\n\n    if (!equation) {\n      resultElement.innerHTML = 'No Equation'\n    } else {\n      resultElement.innerHTML = Algebrite.run(equation)\n      // Algebrite.defint(Algebrite.run(equation), 'x', lowerLimit, upperLimit)\n    }\n\n    let constA = [];\n    let constB = [];\n\n\n    // this.updateResult(['dsadas'], ['dasda'])\n  }\n\n  updateResult(a, b) {\n\n    let resultElement = document.getElementById('result')\n    while (resultElement.firstChild) {\n      resultElement.firstChild.remove()\n    }\n\n\n    a.forEach(el => {\n      let divComp = document.createElement('div')\n      divComp.innerHTML = el\n      resultElement.appendChild(divComp)\n    })\n\n    b.forEach(el => {\n      let divComp = document.createElement('div')\n      divComp.innerHTML = el\n      resultElement.appendChild(divComp)\n    })\n\n  }\n\n\n\n\n\n}\n\nexport default Calculator;\n\n\n"]},"metadata":{},"sourceType":"module"}